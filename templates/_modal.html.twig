{% if VARS is defined %}
    {% if VARS.modalSize is defined %}{% set modalSize = VARS.modalSize %}{% endif %}
    {% if VARS.modalTitle is defined %}{% set modalTitle = VARS.modalTitle %}{% endif %}
{% endif %}
{% if modalTarget is not defined %}{% set modalTarget = targetPrefix ~ "Modal" %}{% endif %}
{% set modalLabel = targetPrefix ~ "Label"%}
{% if nobutton is not defined %}
    <!-- Button trigger modal -->
    <a class="btn btn-primary" role="button" href="#" data-bs-toggle="modal" data-bs-target="#{{ modalTarget }}">{{ modalTitle|trans }}</a>
{% endif %}
  <!-- Modal -->
  <div class="modal fade" id="{{ modalTarget }}" tabindex="-1" role="dialog" aria-labelledby="{{ modalLabel }}" aria-hidden="true">
      <div class="modal-dialog {{ modalSize }}" role="document">
          <div class="modal-content" id="{{ modalTarget }}-content">
                <div class="modal-header btn-primary">
                    <h5 class="modal-title" id="{{ modalLabel }}">{{ modalTitle|trans }}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="{{ closeMessage|default('Close')}}">
                    </button>
                </div>
            {% if noajax is defined %}
                {{ include( included|default(VARS.included) ~ '.html.twig', {
                    'modalTarget': modalTarget,
                    }
                ) }}
            {% else -%}
            {# Código js anterior
                <script>
                    var {{ modalTarget }} = document.getElementById('{{ modalTarget }}');

                    {{ modalTarget }}.addEventListener('show.bs.modal', function (e) {
                        console.log(e.relatedTarget);
                        fetch(e.relatedTarget.dataset.url)
                        .then( response => response.text())
                        .then( body => document.getElementById('{{ modalTarget }}-content').innerHTML=body );
                    }
                );

                </script>
                #}
                <script>
                var {{ modalTarget }} = document.getElementById('{{ modalTarget }}');

                {{ modalTarget }}.addEventListener('show.bs.modal', function (e) {
                    fetch(e.relatedTarget.dataset.url)
                        .then(response => response.text())
                        .then(body => {
                            document.getElementById('{{ modalTarget }}-content').innerHTML = body;

                            const form = document.querySelector('#{{ modalTarget }}-content form');
                            if (form) {
                                // 👇 Captura el botón pulsado en el formulario
                                let clickedButton = null;
                                form.querySelectorAll('button[type="submit"], input[type="submit"]').forEach(btn => {
                                    btn.addEventListener('click', function() {
                                        clickedButton = this; // Almacena el botón pulsado
                                    });
                                });

                                form.addEventListener('submit', async (e) => {
                                    e.preventDefault();
                                    const formData = new FormData(form);

                                    // 👇 Añade el botón pulsado al FormData (clave para Symfony)
                                    if (clickedButton && clickedButton.name) {
                                        formData.append(clickedButton.name, clickedButton.value || '');
                                    }
                                    
                                    const submitResponse = await fetch(form.action, {
                                            method: 'POST',
                                            body: formData,
                                            headers: { 'X-Requested-With': 'XMLHttpRequest' },
                                        });

                                    if (submitResponse.status === 422) {
                                        // Mostrar errores
                                        const errorHtml = await submitResponse.text();
                                        const newForm = (new DOMParser()).parseFromString(errorHtml, 'text/html').querySelector('form');
                                        form.replaceWith(newForm);
                                    } else if (submitResponse.ok) {
                                        console.log(submitResponse);

                                        const contentType = submitResponse.headers.get('content-type');
                                        console.log(contentType);
                                        if (contentType?.includes('application/json')) {
                                            try {
                                                const data = await submitResponse.json();
                                                if (data.redirectUrl) {
                                                    console.log("redirectUrl", data.redirectUrl);
                                                    window.location.href = data.redirectUrl;
                                                    return;
                                                }
                                            } catch (error) {
                                                console.error("JSON inválido:", await submitResponse.text());
                                            }
                                        }
                                    }
                                });
                            }
                        });
                });
                </script>

                {% endif %}
          </div>
      </div>
  </div>
