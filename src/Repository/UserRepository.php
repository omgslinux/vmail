<?php

namespace App\Repository;

use App\Entity\User;
use App\Utils\ReadConfig as RC;
use App\Utils\PassEncoder as PE;
use App\Utils\DeliverMail as DM;
use App\Repository\DomainRepository;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack as RS;

/**
 * usersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
/**
 * @extends ServiceEntityRepository<Booking>
 *
 * @method User|null find($id, $lockMode = null, $lockVersion = null)
 * @method User|null findOneBy(array $criteria, array $orderBy = null)
 * @method User[]    findAll()
 * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */

class UserRepository extends ServiceEntityRepository implements UserLoaderInterface
{
    private $pe;
    private $config;
    private $deliver;
    private $dr;
    private $RS;

    public function __construct(
        ManagerRegistry $registry,
        RS $RS,
        PE $pe,
        RC $config,
        DM $deliver,
        DomainRepository $dr
    ) {
        parent::__construct($registry, User::class);

        $this->pe = $pe;
        $this->config = $config;
        $this->deliver = $deliver;
        $this->dr = $dr;
        $this->RS = $RS;
    }

    //public function loadUserByUsername($username)
    public function loadUserByIdentifier(string $username): ?UserInterface
    {
        $a=explode('@', $username);
        if (count($a) != 2) {
            return null;
        }
        $user=$a[0];
        $domain=$a[1];
        return $this->createQueryBuilder('u')
            ->leftJoin('u.domain', 'd')
            ->where('u.name = :user AND d.name = :domain')
            ->setParameter('user', $user)
            ->setParameter('domain', $domain)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /** @deprecated since Symfony 5.3 */
    public function loadUserByUsername(string $username)
    {
        return $this->loadUserByIdentifier($username);
    }

    public function add(User $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function formSubmit($form)
    {
        $user = $form->getData();
        if (null==$user->getDomain() && $form->get('domain')) {
            $domain = $this->dr->find($form->get('domain'));
            $user->setDomain($domain);
        }
        $plainPassword = $user->getPlainpassword();
        if (!empty($plainPassword)) {
            $user->setPassword($this->encodePassword($plainPassword));
            $this->RS->getSession()->getFlashBag()->add('success', 'Password successfully modified');
        }
        $this->add($user, true);
        if ($user->getSendEmail()) {
            $this->sendWelcomeMail($user);
        }
    }

    public function encodePassword($plainPassword = null): ?string
    {
        if (null!=$plainPassword) {
            return $this->pe->encodePassword($plainPassword);
        }
    }

    public function remove(User $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function sendWelcomeMail(User $user)
    {
        $body=$this->config->findParameter('welcome_body');
        $subject=$this->config->findParameter('welcome_subject');
        $recipient=$user->getEmail();
        $sender='welcome@default';
        $this->deliver->sendMail($subject, $sender, $recipient, $body);
    }

//    /**
//     * @return Booking[] Returns an array of Booking objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('b')
//            ->andWhere('b.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('b.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Booking
//    {
//        return $this->createQueryBuilder('b')
//            ->andWhere('b.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
